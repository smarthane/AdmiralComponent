apply plugin: 'com.tencent.tinker.patch'

/**********************************************************************
 * Tinker使用说明
 * 1.执行assembleDebug/assembleRelease
 * 2.在build/bakApk目录生成xx.apk和xx-R.txt
 * 3.把xx.apk和xx-R.txt配置到getOldApkPath和getApplyResourceMappingPath
 * 4.执行tinkerPatchDebug/tinkerPatchRelease
 * 5.在app/build/outputs/apk/tinkerPatch/debug(release)生成下面的升级包
 *    patch_signed.apk
 *    patch_signed_7zip.apk
 *    patch_unsigned.apk
 * 6.把生成的patch包放到手机SDCARD指定目录
 * 7.加载，重启即达到修复
 * https://github.com/Tencent/tinker/wiki
 *********************************************************************/

/*****************************************************************************************************************************************/
List<String> flavors = new ArrayList<>()
project.android.productFlavors.each { flavor ->
    flavors.add(flavor.name)
}
boolean hasFlavors = flavors.size() > 0
def bakPath = file("${buildDir}/bakApk/")
def date = new Date().format("YYYY-MM-dd-HH-mm-ss")

def getOldApkPath() {
    return "${buildDir}/bakApk/app-release-33-36.apk"
}

def getApplyResourceMappingPath() {
    return "${buildDir}/bakApk/app-release-33-36-R.txt"
}

def getApplyMappingPath() {
    return null
}

def getTinkerIdValue() {
    return gitSha()
}

def getNewApkPath() {
    return null
}

def getOutputFolderPath() {
    return null
}

def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}

/*****************************************************************************************************************************************/

/**
 * tinker 全局信息相关的配置项
 */
tinkerPatch {

    /**
     * ------------------------------------------------------------------------------------------------
     * optional，default 'true'
     * whether use tinker to build
     * ------------------------------------------------------------------------------------------------
     * 是否打开tinker的功能。
     * ------------------------------------------------------------------------------------------------
     * 默认值：true
     */
    tinkerEnable = true

    /**
     * ------------------------------------------------------------------------------------------------
     * necessary，default 'null'
     * the old apk path, use to diff with the new apk to build
     * add apk from the build/bakApk
     * ------------------------------------------------------------------------------------------------
     * 基准apk包的路径，必须输入，否则会报错。
     * ------------------------------------------------------------------------------------------------
     * 默认值：null
     */
    oldApk = getOldApkPath()

    /**
     * ------------------------------------------------------------------------------------------------
     * 选填，用于编译补丁apk路径。如果路径合法，即不再编译新的安装包，使用oldApk与newApk直接编译。
     * ------------------------------------------------------------------------------------------------
     * 默认值：null
     */
    // newApk = getNewApkPath()

    /**
     * ------------------------------------------------------------------------------------------------
     * 选填，设置编译输出路径。
     * ------------------------------------------------------------------------------------------------
     * 默认值：默认在build/outputs/tinkerPatch中
     */
    // outputFolder = getOutputFolderPath()

    /**
     * ------------------------------------------------------------------------------------------------
     * optional，default 'false'
     * there are some cases we may get some warnings
     * if ignoreWarning is true, we would just assert the patch process
     * case 1: minSdkVersion is below 14, but you are using dexMode with raw.
     *         it must be crash when load.
     * case 2: newly added Android Component in AndroidManifest.xml,
     *         it must be crash when load.
     * case 3: loader classes in dex.loader{} are not keep in the main dex,
     *         it must be let tinker not work.
     * case 4: loader classes in dex.loader{} changes,
     *         loader classes is ues to load patch dex. it is useless to change them.
     *         it won't crash, but these changes can't effect. you may ignore it
     * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build
     * ------------------------------------------------------------------------------------------------
     * 选填
     * 如果出现以下的情况，并且ignoreWarning为false，我们将中断编译。因为这些情况可能会导致编译出来的patch包带来风险：
     * 1. minSdkVersion小于14，但是dexMode的值为"raw";
     * 2. 新编译的安装包出现新增的四大组件(Activity, BroadcastReceiver...)；
     * 3. 定义在dex.loader用于加载补丁的类不在main dex中;
     * 4. 定义在dex.loader用于加载补丁的类出现修改；
     * 5. resources.arsc改变，但没有使用applyResourceMapping编译。
     * ------------------------------------------------------------------------------------------------
     * 默认值：false
     */
    ignoreWarning = false

    /**
     * ------------------------------------------------------------------------------------------------
     * optional，default 'true'
     * whether sign the patch file
     * if not, you must do yourself. otherwise it can't check success during the patch loading
     * we will use the sign config with your build type
     * ------------------------------------------------------------------------------------------------
     * 选填,在运行过程中，我们需要验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名。
     * ------------------------------------------------------------------------------------------------
     * 默认值：true
     */
    useSign = true

    /**
     * Warning, applyMapping will affect the normal android build!
     * ------------------------------------------------------------------------------------------------
     * 编译相关的配置项
     */
    buildConfig {

        /**
         * -------------------------------------------------------------------------------------------
         * optional，default 'null'
         * if we use tinkerPatch to build the patch apk, you'd better to apply the old
         * apk mapping file if minifyEnabled is enable!
         * Warning:
         * you must be careful that it will affect the normal assemble build!
         * -------------------------------------------------------------------------------------------
         * 可选参数；
         * 在编译新的apk时候，我们希望通过保持旧apk的proguard混淆方式，从而减少补丁包的大小。
         * 这个只是推荐设置，不设置applyMapping也不会影响任何的assemble编译。
         * -------------------------------------------------------------------------------------------
         * 默认值：null
         */
        applyMapping = getApplyMappingPath()

        /**
         * -------------------------------------------------------------------------------------------
         * optional，default 'null'
         * It is nice to keep the resource id from R.txt file to reduce java changes
         * -------------------------------------------------------------------------------------------
         * 可选参数；
         * 在编译新的apk时候，我们希望通过旧apk的R.txt文件保持ResId的分配，
         * 这样不仅可以减少补丁包的大小，同时也避免由于ResId改变导致remote view异常。
         * -------------------------------------------------------------------------------------------
         * 默认值：null
         */
        applyResourceMapping = getApplyResourceMappingPath()

        /**
         * -------------------------------------------------------------------------------------------
         * necessary，default 'null'
         * because we don't want to check the base apk with md5 in the runtime(it is slow)
         * tinkerId is use to identify the unique base apk when the patch is tried to apply.
         * we can use git rev, svn rev or simply versionCode.
         * we will gen the tinkerId in your manifest automatic
         * -------------------------------------------------------------------------------------------
         * 必须;
         * 在运行过程中，我们需要验证基准apk包的tinkerId是否等于补丁包的tinkerId。
         * 这个是决定补丁包能运行在哪些基准包上面，一般来说我们可以使用git版本号、versionName等等。
         * -------------------------------------------------------------------------------------------
         * 默认值：null
         */
        tinkerId = getTinkerIdValue()

        /**
         * -------------------------------------------------------------------------------------------
         * if keepDexApply is true, class in which dex refer to the old apk.
         * open this can reduce the dex diff file size.
         * -------------------------------------------------------------------------------------------
         * 如果我们有多个dex,编译补丁时可能会由于类的移动导致变更增多。
         * 若打开keepDexApply模式，补丁包将根据基准包的类分布来编译。
         * -------------------------------------------------------------------------------------------
         * 默认值：false
         */
        keepDexApply = false

        /**
         * -------------------------------------------------------------------------------------------
         * optional, default 'false'
         * Whether tinker should treat the base apk as the one being protected by app
         * protection tools.
         * If this attribute is true, the generated patch package will contain a
         * dex including all changed classes instead of any dexdiff patch-info files.
         * -------------------------------------------------------------------------------------------
         * 可选参数；
         * 是否使用加固模式，仅仅将变更的类合成补丁。注意，这种模式仅仅可以用于加固应用中。
         * -------------------------------------------------------------------------------------------
         * 默认值：false
         */
        isProtectedApp = false

        /**
         * -------------------------------------------------------------------------------------------
         * optional, default 'false'
         * Whether tinker should support component hotplug (add new component dynamically).
         * If this attribute is true, the component added in new apk will be available after
         * patch is successfully loaded. Otherwise an error would be announced when generating patch
         * on compile-time.
         * <b>Notice that currently this feature is incubating and only support NON-EXPORTED Activity</b>
         * -------------------------------------------------------------------------------------------
         * 可选参数；
         * 是否支持新增非export的Activity
         * supportHotplugComponent(added 1.9.0)
         * -------------------------------------------------------------------------------------------
         * 默认值：false
         */
        supportHotplugComponent = false
    }

    /**
     * dex相关的配置项
     */
    dex {

        /**
         * --------------------------------------------------------------------------------------------
         * optional，default 'jar'
         * only can be 'raw' or 'jar'. for raw, we would keep its original format
         * for jar, we would repack dexes with zip format.
         * if you want to support below 14, you must use jar
         * or you want to save rom or check quicker, you can use raw mode also
         * --------------------------------------------------------------------------------------------
         * 只能是'raw'或者'jar'。
         * 对于'raw'模式，我们将会保持输入dex的格式。
         * 对于'jar'模式，我们将会把输入dex重新压缩封装到jar。
         * 如果你的minSdkVersion小于14，你必须选择‘jar’模式，而且它更省存储空间，但是验证md5时比'raw'模式耗时。
         * 默认我们并不会去校验md5,一般情况下选择jar模式即可。
         * --------------------------------------------------------------------------------------------
         * 默认值：jar
         */
        dexMode = "jar"

        /**
         * --------------------------------------------------------------------------------------------
         * necessary，default '[]'
         * what dexes in apk are expected to deal with tinkerPatch
         * it support * or ? pattern.
         * --------------------------------------------------------------------------------------------
         * 必选;
         * 需要处理dex路径，支持*、?通配符，必须使用'/'分割。路径是相对安装包的，例如assets/...
         * --------------------------------------------------------------------------------------------
         * 默认值：[]
         */
        pattern = ["classes*.dex",
                   "assets/secondary-dex-?.jar"]

        /**
         * --------------------------------------------------------------------------------------------
         * necessary，default '[]'
         * Warning, it is very very important, loader classes can't change with patch.
         * thus, they will be removed from patch dexes.
         * you must put the following class into main dex.
         * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
         * own tinkerLoader, and the classes you use in them
         * --------------------------------------------------------------------------------------------
         * 必选;
         * 这一项非常重要，它定义了哪些类在加载补丁包的时候会用到。这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。
         * 这里需要定义的类有：
         * 1. 你自己定义的Application类；
         * 2. Tinker库中用于加载补丁包的部分类，即com.tencent.tinker.loader.*；
         * 3. 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；
         * 4. 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。这里需要注意的是，这些类的直接引用类也需要加入到loader中。或者你需要将这个类变成非preverify。
         * 5. 使用1.7.6版本之后的gradle版本，参数1、2会自动填写。若使用newApk或者命令行版本编译，1、2依然需要手动填写
         * --------------------------------------------------------------------------------------------
         * 默认值：[]
         */
        loader = [
                "com.smarthane.admiral.component.common.sdk.tinker.TinkerBuildInfo"
        ]
    }

    /**
     * lib相关的配置项
     */
    lib {

        /**
         * ------------------------------------------------------------------------------------------------
         * optional，default '[]'
         * what library in apk are expected to deal with tinkerPatch
         * it support * or ? pattern.
         * for library in assets, we would just recover them in the patch directory
         * you can get them in TinkerLoadResult with Tinker
         * ------------------------------------------------------------------------------------------------
         * 选填;
         * 需要处理lib路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致, 路径是相对安装包的，例如assets/...
         * ------------------------------------------------------------------------------------------------
         * 默认值：[]
         */
        pattern = ["lib/*/*.so"]
    }

    /**
     * res相关的配置项
     */
    res {

        /**
         * --------------------------------------------------------------------------------------------
         * optional，default '[]'
         * what resource in apk are expected to deal with tinkerPatch
         * it support * or ? pattern.
         * you must include all your resources in apk here,
         * otherwise, they won't repack in the new apk resources.
         * --------------------------------------------------------------------------------------------
         * 可选参数；
         * 需要处理res路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致, 路径是相对安装包的，例如assets/...，
         * 务必注意的是，只有满足pattern的资源才会放到合成后的资源包。
         * --------------------------------------------------------------------------------------------
         * 默认值：[]
         */
        pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

        /**
         * --------------------------------------------------------------------------------------------
         * optional，default '[]'
         * the resource file exclude patterns, ignore add, delete or modify resource change
         * it support * or ? pattern.
         * Warning, we can only use for files no relative with resources.arsc
         * --------------------------------------------------------------------------------------------
         * 可选参数；
         * 支持*、?通配符，必须使用'/'分割。若满足ignoreChange的pattern，在编译时会忽略该文件的新增、删除与修改。
         * 最极端的情况，ignoreChange与上面的pattern一致，即会完全忽略所有资源的修改。
         * --------------------------------------------------------------------------------------------
         * 默认值：[]
         */
        ignoreChange = ["assets/sample_meta.txt"]

        /**
         * --------------------------------------------------------------------------------------------
         * default 100kb
         * for modify resource, if it is larger than 'largeModSize'
         * we would like to use bsdiff algorithm to reduce patch file size
         * --------------------------------------------------------------------------------------------
         * 可选参数；
         * 对于修改的资源，如果大于largeModSize，我们将使用bsdiff算法。
         * 这可以降低补丁包的大小，但是会增加合成时的复杂度。默认大小为100kb
         * --------------------------------------------------------------------------------------------
         * 默认值：100
         */
        largeModSize = 100
    }

    /**
     * 用于生成补丁包中的'package_meta.txt'文件
     */
    packageConfig {

        /**
         * ------------------------------------------------------------------------------------------------
         * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
         * package meta file gen. path is assets/package_meta.txt in patch file
         * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
         * or TinkerLoadResult.getPackageConfigByName
         * we will get the TINKER_ID from the old apk manifest for you automatic,
         * other config files (such as patchMessage below)is not necessary
         * ------------------------------------------------------------------------------------------------
         * configField("key", "value"), 默认我们自动从基准安装包与新安装包的Manifest中读取tinkerId,并自动写入configField。
         * 在这里，你可以定义其他的信息，在运行时可以通过TinkerLoadResult.getPackageConfigByName得到相应的数值。但是建议直接通过修改代码来实现，例如BuildConfig。
         * ------------------------------------------------------------------------------------------------
         * 默认值：TINKER_ID, NEW_TINKER_ID
         */
        configField("patchMessage", "tinker is sample to use")
        /**
         * just a sample case, you can use such as sdkVersion, brand, channel...
         * you can parse it in the SamplePatchListener.
         * Then you can use patch conditional!
         */
        configField("platform", "all")
        /**
         * patch version via packageConfig
         */
        configField("patchVersion", "1.0")
    }
    //or you can add config filed outside, or get meta value from old apk
    //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
    //project.tinkerPatch.packageConfig.configField("test2", "sample")

    /**
     * if you don't use zipArtifact or path, we just use 7za to try
     * 7zip路径配置项，执行前提是useSign为true
     */
    sevenZip {

        /**
         * ------------------------------------------------------------------------------------------------
         * optional，default '7za'
         * the 7zip artifact path, it will use the right 7za with your platform
         * ------------------------------------------------------------------------------------------------
         * 选填;
         * 例如"com.tencent.mm:SevenZip:1.1.10"，将自动根据机器属性获得对应的7za运行文件，推荐使用。
         * ------------------------------------------------------------------------------------------------
         * 默认值：null
         */
        zipArtifact = "com.tencent.mm:SevenZip:1.1.10"

        /**
         * ------------------------------------------------------------------------------------------------
         * optional，default '7za'
         * you can specify the 7za path yourself, it will overwrite the zipArtifact value
         * ------------------------------------------------------------------------------------------------
         * 选填;
         * 系统中的7za路径，例如"/usr/local/bin/7za"。path设置会覆盖zipArtifact，若都不设置，将直接使用7za去尝试。
         * ------------------------------------------------------------------------------------------------
         * 默认值：7za
         */
        // path = "/usr/local/bin/7za"
    }
}

/*****************************************************************************************************************************************/


/**
 * bak apk and mapping
 */
android.applicationVariants.all { variant ->
    /**
     * task type, you want to bak
     */
    def taskName = variant.name

    tasks.all {
        if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

            it.doLast {
                copy {
                    def fileNamePrefix = "${project.name}-${variant.baseName}"
                    def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                    def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath

                    if (variant.metaClass.hasProperty(variant, 'packageApplicationProvider')) {
                        def packageAndroidArtifact = variant.packageApplicationProvider.get()
                        if (packageAndroidArtifact != null) {
                            try {
                                from new File(packageAndroidArtifact.outputDirectory.getAsFile().get(), variant.outputs.first().apkData.outputFileName)
                            } catch (Exception e) {
                                from new File(packageAndroidArtifact.outputDirectory, variant.outputs.first().apkData.outputFileName)
                            }
                        } else {
                            from variant.outputs.first().mainOutputFile.outputFile
                        }
                    } else {
                        from variant.outputs.first().outputFile
                    }

                    into destPath
                    rename { String fileName ->
                        fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                    }

                    from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                    into destPath
                    rename { String fileName ->
                        fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                    }

                    from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                    from "${buildDir}/intermediates/symbol_list/${variant.dirName}/R.txt"
                    from "${buildDir}/intermediates/runtime_symbol_list/${variant.dirName}/R.txt"
                    into destPath
                    rename { String fileName ->
                        fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                    }
                }
            }
        }
    }
}


/*****************************************************************************************************************************************/

project.afterEvaluate {
    //sample use for build all flavor for one time
    if (hasFlavors) {
        task(tinkerPatchAllFlavorRelease) {
            group = 'tinker'
            def originOldPath = getTinkerBuildFlavorDirectory()
            for (String flavor : flavors) {
                def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                dependsOn tinkerTask
                def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                preAssembleTask.doFirst {
                    String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                    project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                    project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                    project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"
                }
            }
        }

        task(tinkerPatchAllFlavorDebug) {
            group = 'tinker'
            def originOldPath = getTinkerBuildFlavorDirectory()
            for (String flavor : flavors) {
                def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                dependsOn tinkerTask
                def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                preAssembleTask.doFirst {
                    String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                    project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                    project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                    project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                }
            }
        }
    }
}

/*****************************************************************************************************************************************/
