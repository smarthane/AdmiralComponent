apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.smarthane.admiralcomponent"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {

        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    //admiral demo
    //api project(":admiral")
    //implementation rootProject.ext.dependencies["retrofit-url-manager"]

    //因为 lib_common_res 依赖了 lib_common_sdk, 所以如果业务模块需要公共 UI 组件就依赖 lib_common_res, 如果不需要就只依赖 lib_common_sdk
    implementation project(":lib_common_res")
    implementation project(":lib_common_service")

    if (!isBuildModule.toBoolean()) {
        implementation(project(":module_common")){
            exclude module: 'lib_common_res'
            exclude module: 'lib_common_service'
        }
        implementation(project(":module_gank")){
            exclude module: 'lib_common_res'
            exclude module: 'lib_common_service'
        }
        implementation(project(":module_zhihu")){
            exclude module: 'lib_common_res'
            exclude module: 'lib_common_service'
        }
        implementation(project(":module_netease")){
            exclude module: 'lib_common_res'
            exclude module: 'lib_common_service'
        }
    }

    //tools
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]

    debugImplementation rootProject.ext.dependencies["canary-debug"]
    releaseImplementation rootProject.ext.dependencies["canary-release"]
    testImplementation rootProject.ext.dependencies["canary-release"]
}
